-- Table definitions for the tournament project.
--
-- Put your SQL 'create table' statements in this file; also 'create view'
-- statements if you choose to use it.
--
-- You can write comments in this file by starting them with two dashes, like
-- these lines here.

DROP VIEW IF EXISTS V_STANDINGS;
DROP TABLE IF EXISTS TOURNAMENT;
DROP TABLE IF EXISTS MATCHES;
DROP TABLE IF EXISTS PLAYERS;
DROP TABLE IF EXISTS PLAYER_STANDINGS;
DROP TABLE IF EXISTS PLAYERS_TOURNAMENT;
DROP SEQUENCE IF EXISTS ID_TOURNAMENT_SEQUENCE;
DROP SEQUENCE IF EXISTS ID_PLAYER_SEQUENCE;



CREATE TABLE TOURNAMENT (
	TOURNAMENT_ID INTEGER PRIMARY KEY, 
	TOURNAMENT_NAME TEXT, 
	TOURNAMENT_PLACE TEXT, 
	START_DATE DATE,  
	END_DATE DATE, 
	NUMBER_PARTICIPANTS INTEGER, 
	WINNER XML, 
	SECOND_PLACE XML);

CREATE TABLE MATCHES ( 
	TOURNAMENT_ID INTEGER, 
	ROUND INTEGER, 
	DATE_MATCH TIMESTAMP, 
	WINNER INTEGER, 
	LOSER INTEGER );

CREATE INDEX MATCHES_IDX01 ON MATCHES (TOURNAMENT_ID,WINNER,LOSER);

CREATE TABLE PLAYERS (
	PLAYER_ID INTEGER PRIMARY KEY,
	FULL_NAME TEXT,
	BIRTHDATE DATE,
	AGE INTEGER,
	REGISTER_DATE DATE,
	LAST_TRNMNT_RGSTRD INTEGER);

CREATE INDEX PLAYERS_IDX01 ON PLAYERS(PLAYER_ID);
CREATE INDEX PLAYERS_IDX02 ON PLAYERS(FULL_NAME);

CREATE TABLE PLAYER_STANDINGS ( 
	PLAYER_ID INTEGER, 
	WINS INTEGER, 
	LOSSES INTEGER, 
	TIEDS INTEGER,
	MATCHES INTEGER,
	BYES INTEGER,
	POINTS DOUBLE PRECISION,
	TOURNAMENT_ID INTEGER );

ALTER TABLE PLAYER_STANDINGS ADD PRIMARY KEY (PLAYER_ID,TOURNAMENT_ID);


CREATE TABLE PLAYERS_TOURNAMENT (
	PLAYER_ID INTEGER,
	RANK_INI INTEGER,
	RANK_FIN INTEGER,
	TOURNAMENT_ID INTEGER);
ALTER TABLE PLAYERS_TOURNAMENT ADD PRIMARY KEY (PLAYER_ID,TOURNAMENT_ID);
CREATE INDEX PLAYER_TRNMNT_IDX01 ON PLAYERS_TOURNAMENT(TOURNAMENT_ID);

CREATE VIEW V_STANDINGS AS 
	SELECT A.PLAYER_ID, A.FULL_NAME, COALESCE(B.WINS,0) WINS, 
    COALESCE(B.MATCHES,0) MATCHES,B.BYES, B.POINTS, A.RANK_INI,A.RANK_FIN, A.TOURNAMENT_ID FROM 
    (SELECT C.PLAYER_ID,C.FULL_NAME,D.RANK_INI,D.RANK_FIN,D.TOURNAMENT_ID 
    FROM PLAYERS C, PLAYERS_TOURNAMENT D WHERE C.PLAYER_ID=D.PLAYER_ID) A 
    LEFT OUTER JOIN PLAYER_STANDINGS B ON 
    (A.PLAYER_ID=B.PLAYER_ID AND B.TOURNAMENT_ID=A.TOURNAMENT_ID)
    ORDER BY TOURNAMENT_ID, WINS DESC, BYES DESC, POINTS DESC,TIEDS;


CREATE SEQUENCE ID_PLAYER_SEQUENCE START 101 MAXVALUE 999999;
CREATE SEQUENCE ID_TOURNAMENT_SEQUENCE START 10001 MAXVALUE 99999;

CREATE OR REPLACE FUNCTION REGPLAYERTOURNAMENT() RETURNS TRIGGER AS $REGPLAYERTOURNAMENT$
	BEGIN
		INSERT INTO PLAYERS_TOURNAMENT (PLAYER_ID,RANK_INI,RANK_FIN,TOURNAMENT_ID)
			VALUES(NEW.PLAYER_ID,0,0,NEW.LAST_TRNMNT_RGSTRD);
		RETURN NULL;
	END;

$REGPLAYERTOURNAMENT$ LANGUAGE PLPGSQL;

CREATE TRIGGER PLAYERTOURNAMENT
	AFTER INSERT OR UPDATE ON PLAYERS
	FOR EACH ROW
	EXECUTE PROCEDURE REGPLAYERTOURNAMENT();

CREATE OR REPLACE FUNCTION UPDATESTANDINGS() RETURNS TRIGGER AS $UPDATESTANDINGS$
	BEGIN
	-- This function updates the stands after report a match, it increments
	-- Winner +1, loser nothing, player-bye +1. 
	-- Also update the points for each player. The rule of points is increment by the value of round 
	-- winner +$round, loser nothing, player-bye nothing

		IF NEW.LOSER=0 THEN -- This is the rule of player with round bye
			UPDATE PLAYER_STANDINGS SET WINS=WINS+1, MATCHES=MATCHES+1, BYES=BYES+1
				WHERE PLAYER_ID=NEW.WINNER AND TOURNAMENT_ID=NEW.TOURNAMENT_ID;
			IF NOT FOUND THEN
				INSERT INTO PLAYER_STANDINGS (PLAYER_ID, WINS, LOSSES, TIEDS, MATCHES,BYES,POINTS, TOURNAMENT_ID)
					VALUES (NEW.WINNER, 1,0,0,1,1,0,NEW.TOURNAMENT_ID);
			END IF;
		END IF;

		IF NEW.LOSER>0 THEN
		    -- This update the winner
			UPDATE PLAYER_STANDINGS SET WINS=WINS+1, MATCHES=MATCHES+1, POINTS=POINTS+NEW.ROUND
				WHERE PLAYER_ID=NEW.WINNER AND TOURNAMENT_ID=NEW.TOURNAMENT_ID;
			IF NOT FOUND THEN
				INSERT INTO PLAYER_STANDINGS (PLAYER_ID, WINS, LOSSES, TIEDS, MATCHES,BYES,POINTS, TOURNAMENT_ID)
					VALUES (NEW.WINNER, 1,0,0,1,0,NEW.ROUND,NEW.TOURNAMENT_ID);
			END IF;
		    -- This update the loser
			UPDATE PLAYER_STANDINGS SET LOSSES=LOSSES+1, MATCHES=MATCHES+1
				WHERE PLAYER_ID=NEW.LOSER AND TOURNAMENT_ID=NEW.TOURNAMENT_ID;
			IF NOT FOUND THEN
			INSERT INTO PLAYER_STANDINGS (PLAYER_ID, WINS, LOSSES, TIEDS, MATCHES,BYES,POINTS, TOURNAMENT_ID)
				VALUES (NEW.LOSER, 0,1,0,1,0,0,NEW.TOURNAMENT_ID);
			END IF;
		END IF;
		RETURN NULL;
	END;

$UPDATESTANDINGS$ LANGUAGE PLPGSQL;

CREATE TRIGGER STANDINGS
	AFTER INSERT ON MATCHES
	FOR EACH ROW
	EXECUTE PROCEDURE UPDATESTANDINGS();





